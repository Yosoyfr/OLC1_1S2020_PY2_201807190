/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,15],$V2=[1,14],$V3=[4,26],$V4=[22,26],$V5=[1,35],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[30,37,52,53,54,55,56],$Vc=[1,46],$Vd=[21,42],$Ve=[2,49],$Vf=[1,49],$Vg=[1,48],$Vh=[1,65],$Vi=[1,71],$Vj=[1,75],$Vk=[1,66],$Vl=[1,67],$Vm=[1,68],$Vn=[1,69],$Vo=[1,70],$Vp=[1,73],$Vq=[1,72],$Vr=[1,74],$Vs=[1,81],$Vt=[1,90],$Vu=[1,91],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[2,24,30,44,52,53,54,55,56,78,82,85,87,88,89,90,92,93,94],$VD=[1,100],$VE=[1,104],$VF=[1,108],$VG=[1,109],$VH=[1,118],$VI=[1,117],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[1,123],$VO=[1,124],$VP=[1,125],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,129],$VU=[1,130],$VV=[21,40,42,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86],$VW=[40,42],$VX=[21,40,42],$VY=[2,24,30,44,52,53,54,55,56,78,81,82,85,87,88,89,90,92,93,94],$VZ=[1,179],$V_=[21,40,42,57,59,64,65,66,67,68,69,70,71,86],$V$=[21,40,42,57,59,60,61,64,65,66,67,68,69,70,71,86],$V01=[21,40,42,64,65,86],$V11=[21,40,42,64,65,66,67,86],$V21=[21,40,42,64,65,66,67,68,69,70,71,86],$V31=[1,195],$V41=[1,196],$V51=[1,199],$V61=[30,85,87],$V71=[1,206];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EOF":4,"IMPORTS":5,"CLASS":6,"INSTRUCCIONES":7,"INSTRUCCION":8,"IF":9,"SWITCH":10,"WHILE":11,"DO_WHILE":12,"FOR":13,"LLAMADAFUNCIONES":14,"BREAK":15,"RETURN":16,"CONTINUE":17,"PRINT":18,"DECLARACION":19,"ASIGNACION":20,"PUNTOYCOMA":21,"RIMPORT":22,"IMPORT":23,"IDENTIFICADOR":24,"CLASSP":25,"RCLASS":26,"BLOQUE_CLASE":27,"LLAVEIZQUIERDA":28,"BLOQUE_CLASEP":29,"LLAVEDERECHA":30,"BLOQUE_CLASEPP":31,"METODOS":32,"TIPOMETODO":33,"BLOQUE_METODO":34,"TIPO":35,"ASIGNACIONPARAMETROS":36,"RVOID":37,"RMAIN":38,"PARENTESISIZQUIERDO":39,"PARENTESISDERECHO":40,"LISTAPARAMETROS":41,"COMA":42,"PARAMETROS":43,"RPRINT":44,"EXPRESION":45,"DECLARACIONP":46,"DECLARACIONPP":47,"IGUAL":48,"INC_DEC":49,"INCREMENTO":50,"DECREMENTO":51,"RINT":52,"RDOUBLE":53,"RBOOLEAN":54,"RSTRING":55,"RCHAR":56,"RESTA":57,"NOT":58,"SUMA":59,"MULTIPLICACION":60,"DIVISION":61,"MODULO":62,"POTENCIA":63,"AND":64,"OR":65,"IGUALDAD":66,"DISTINTO":67,"MENORIGUALQUE":68,"MENORQUE":69,"MAYORIGUALQUE":70,"MAYORQUE":71,"NUMERO":72,"RTRUE":73,"RFALSE":74,"CADENA":75,"CARACTER":76,"LISTAEXPRESIONES":77,"RIF":78,"CONDICION":79,"BLOQUE_INSTRUCCIONES":80,"RELSE":81,"RSWITCH":82,"CASES":83,"CASE_EVALUAR":84,"RCASE":85,"DOSPUNTOS":86,"RDEFAULT":87,"RWHILE":88,"RDO":89,"RFOR":90,"FORINC_DEC":91,"RRETURN":92,"RBREAK":93,"RCONTINUE":94,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",21:"PUNTOYCOMA",22:"RIMPORT",24:"IDENTIFICADOR",26:"RCLASS",28:"LLAVEIZQUIERDA",30:"LLAVEDERECHA",37:"RVOID",38:"RMAIN",39:"PARENTESISIZQUIERDO",40:"PARENTESISDERECHO",42:"COMA",44:"RPRINT",48:"IGUAL",50:"INCREMENTO",51:"DECREMENTO",52:"RINT",53:"RDOUBLE",54:"RBOOLEAN",55:"RSTRING",56:"RCHAR",57:"RESTA",58:"NOT",59:"SUMA",60:"MULTIPLICACION",61:"DIVISION",62:"MODULO",63:"POTENCIA",64:"AND",65:"OR",66:"IGUALDAD",67:"DISTINTO",68:"MENORIGUALQUE",69:"MENORQUE",70:"MAYORIGUALQUE",71:"MAYORQUE",72:"NUMERO",73:"RTRUE",74:"RFALSE",75:"CADENA",76:"CARACTER",78:"RIF",81:"RELSE",82:"RSWITCH",85:"RCASE",86:"DOSPUNTOS",87:"RDEFAULT",88:"RWHILE",89:"RDO",90:"RFOR",92:"RRETURN",93:"RBREAK",94:"RCONTINUE"},
productions_: [0,[3,1],[3,3],[3,2],[3,1],[7,2],[7,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[5,3],[5,2],[23,2],[23,2],[6,2],[6,1],[25,3],[27,3],[27,2],[29,2],[29,1],[31,1],[31,1],[32,2],[34,3],[34,2],[33,3],[33,3],[33,4],[36,3],[36,2],[41,3],[41,1],[43,2],[18,5],[19,3],[46,3],[46,1],[47,3],[47,1],[20,4],[20,2],[49,2],[49,2],[35,1],[35,1],[35,1],[35,1],[35,1],[45,2],[45,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,4],[45,3],[45,1],[45,3],[14,5],[14,4],[77,3],[77,1],[9,3],[9,5],[9,5],[10,7],[83,2],[83,1],[84,4],[84,3],[84,3],[84,2],[79,3],[80,3],[80,2],[11,3],[12,5],[13,8],[13,9],[91,3],[91,1],[16,3],[16,2],[15,2],[17,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4: case 19: case 23:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
}
},
table: [{2:[1,5],3:1,4:[1,2],5:3,6:4,22:[1,6],25:7,26:$V0},{1:[3]},{1:[2,1]},{6:9,22:[1,10],25:7,26:$V0},{4:[1,11],25:12,26:$V0},{1:[2,4]},{2:$V1,23:13,24:$V2},o($V3,[2,25]),{24:[1,16]},{4:[1,17],25:12,26:$V0},{2:$V1,23:18,24:$V2},{1:[2,3]},o($V3,[2,24]),o($V4,[2,21]),{21:[1,19]},{21:[1,20]},{27:21,28:[1,22]},{1:[2,2]},o($V4,[2,20]),o($V4,[2,22]),o($V4,[2,23]),o($V3,[2,26]),{19:26,29:23,30:[1,24],31:25,32:27,33:29,35:28,37:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va},{19:26,30:[1,36],31:37,32:27,33:29,35:28,37:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va},o($V3,[2,28]),o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),{24:[1,39],46:38,47:40},{28:[1,42],34:41},{24:[2,54]},{24:[2,55]},{24:[2,56]},{24:[2,57]},{24:[2,58]},{24:[1,43],38:[1,44]},o($V3,[2,27]),o($Vb,[2,29]),{21:[1,45],42:$Vc},o($Vd,$Ve,{36:47,39:$Vf,48:$Vg}),o($Vd,[2,47]),o($Vb,[2,33]),{2:$Vh,7:50,8:52,9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,24:$Vi,30:[1,51],35:76,44:$Vj,49:77,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr},{36:78,39:$Vf},{39:[1,79]},o([2,24,30,37,39,44,52,53,54,55,56,57,58,72,73,74,75,76,78,82,85,87,88,89,90,92,93,94],[2,45]),{24:$Vs,47:80},{28:[2,36]},{24:$Vt,39:$Vu,45:82,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{35:95,40:[1,93],41:92,43:94,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va},{2:$Vh,8:97,9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,24:$Vi,30:[1,96],35:76,44:$Vj,49:77,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Vb,[2,35]),o($VC,[2,6]),o($VC,[2,7]),o($VC,[2,8]),o($VC,[2,9]),o($VC,[2,10]),o($VC,[2,11]),o($VC,[2,12]),o($VC,[2,13]),o($VC,[2,14]),o($VC,[2,15]),o($VC,[2,16]),o($VC,[2,17]),o($VC,[2,18]),{21:[1,98]},{39:$VD,79:99},{39:[1,101]},{39:$VD,79:102},{28:$VE,80:103},{39:[1,105]},{39:[1,106],48:[1,107],50:$VF,51:$VG},{21:[1,110]},{21:[1,112],24:$Vt,39:$Vu,45:111,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{21:[1,113]},{39:[1,114]},{24:$Vs,46:38,47:40},{21:[1,115]},{28:[2,37]},{40:[1,116]},o($Vd,[2,46]),o($Vd,$Ve,{48:$Vg}),o($Vd,[2,48],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),{24:$Vt,39:$Vu,45:131,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:132,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VV,[2,75]),o($VV,[2,76]),o($VV,[2,77]),o($VV,[2,78]),o($VV,[2,79]),o($VV,[2,82],{39:[1,133]}),{24:$Vt,39:$Vu,45:134,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{40:[1,135],42:[1,136]},{28:[2,40]},o($VW,[2,42]),{24:[1,137]},o($Vb,[2,34]),o($VC,[2,5]),o($VC,[2,19]),{28:$VE,80:138},{24:$Vt,39:$Vu,45:139,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:140,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{28:$VE,80:141},{88:[1,142]},{2:$Vh,7:143,8:52,9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,24:$Vi,30:[1,144],35:76,44:$Vj,49:77,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr},{19:145,24:$Vs,35:76,46:146,47:40,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va},{24:$Vt,39:$Vu,40:[1,148],45:149,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:147},{24:$Vt,39:$Vu,45:150,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VX,[2,52]),o($VX,[2,53]),o($VC,[2,109]),{21:[1,151],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},o($VC,[2,108]),o($VC,[2,110]),{24:$Vt,39:$Vu,45:152,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VC,[2,51]),{28:[2,38]},{24:$Vt,39:$Vu,45:153,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:154,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:155,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:156,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:157,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:158,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:159,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:160,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:161,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:162,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:163,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:164,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:165,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{24:$Vt,39:$Vu,45:166,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VV,[2,59]),o($VV,[2,60]),{24:$Vt,39:$Vu,40:[1,168],45:149,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:167},{40:[1,169],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{28:[2,39]},{35:95,43:170,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va},o($VW,[2,43]),o($VC,[2,88],{81:[1,171]}),{40:[1,172],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{40:[1,173],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},o($VC,[2,101]),{39:$VD,79:174},{2:$Vh,8:97,9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,24:$Vi,30:[1,175],35:76,44:$Vj,49:77,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VY,[2,100]),{24:$Vt,39:$Vu,45:176,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{21:[1,177],42:$Vc},{40:[1,178],42:$VZ},{21:[1,180]},o($VW,[2,87],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),{21:[1,181],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},o($VC,[2,107]),{40:[1,182],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},o($V_,[2,61],{60:$VJ,61:$VK,62:$VL,63:$VM}),o($V_,[2,62],{60:$VJ,61:$VK,62:$VL,63:$VM}),o($V$,[2,63],{62:$VL,63:$VM}),o($V$,[2,64],{62:$VL,63:$VM}),o($VV,[2,65]),o($VV,[2,66]),o($V01,[2,67],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),o($V01,[2,68],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),o($V11,[2,69],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,68:$VR,69:$VS,70:$VT,71:$VU}),o($V11,[2,70],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,68:$VR,69:$VS,70:$VT,71:$VU}),o($V21,[2,71],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o($V21,[2,72],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o($V21,[2,73],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o($V21,[2,74],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),{40:[1,183],42:$VZ},o($VV,[2,81]),o($VV,[2,83]),o($VW,[2,41]),{9:185,28:$VE,78:$Vk,80:184},o([21,28],[2,98]),{28:[1,186]},{21:[1,187]},o($VY,[2,99]),{21:[1,188],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{24:$Vt,39:$Vu,45:189,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{21:[1,190]},{24:$Vt,39:$Vu,45:191,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VC,[2,85]),o($VC,[2,50]),{21:[1,192]},o($VV,[2,80]),o($VC,[2,89]),o($VC,[2,90]),{83:193,84:194,85:$V31,87:$V41},o($VC,[2,102]),{24:$V51,49:198,91:197},{21:[1,200],57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},o($VC,[2,84]),o($VW,[2,86],{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),o($VC,[2,44]),{30:[1,201],84:202,85:$V31,87:$V41},o($V61,[2,93]),{24:$Vt,39:$Vu,45:203,57:$Vv,58:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB},{86:[1,204]},{40:[1,205],42:$V71},o($VW,[2,106]),{50:$VF,51:$VG},{24:$V51,49:198,91:207},o($VC,[2,91]),o($V61,[2,92]),{57:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,86:[1,208]},o($V61,[2,97],{8:52,9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,35:76,49:77,7:209,2:$Vh,24:$Vi,44:$Vj,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr}),{28:$VE,80:210},{24:$V51,49:211},{40:[1,212],42:$V71},o($V61,[2,95],{8:52,9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,35:76,49:77,7:213,2:$Vh,24:$Vi,44:$Vj,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr}),o($V61,[2,96],{9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,35:76,49:77,8:97,2:$Vh,24:$Vi,44:$Vj,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr}),o($VC,[2,103]),o($VW,[2,105]),{28:$VE,80:214},o($V61,[2,94],{9:53,10:54,11:55,12:56,13:57,14:58,15:59,16:60,17:61,18:62,19:63,20:64,35:76,49:77,8:97,2:$Vh,24:$Vi,44:$Vj,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,78:$Vk,82:$Vl,88:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr}),o($VC,[2,104])],
defaultActions: {2:[2,1],5:[2,4],11:[2,3],17:[2,2],30:[2,54],31:[2,55],32:[2,56],33:[2,57],34:[2,58],47:[2,36],78:[2,37],93:[2,40],116:[2,38],135:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentario de linea
break;
case 2:// Comentario multilina
break;
case 3:return 52;
break;
case 4:return 53;
break;
case 5:return 54;
break;
case 6:return 56;
break;
case 7:return 55;
break;
case 8:return "RTRUE";
break;
case 9:return "RFALSE";
break;
case 10:return 78;
break;
case 11:return 81;
break;
case 12:return 82;
break;
case 13:return 85;
break;
case 14:return 87;
break;
case 15:return 93;
break;
case 16:return 88;
break;
case 17:return 89;
break;
case 18:return 90;
break;
case 19:return 94;
break;
case 20:return 92;
break;
case 21:return "RPRINT";
break;
case 22:return "RPRINT";
break;
case 23:return 26;
break;
case 24:return 22;
break;
case 25:return 38;
break;
case 26:return 37;
break;
case 27:return 50;
break;
case 28:return 59;
break;
case 29:return 51;
break;
case 30:return 57;
break;
case 31:return 60;
break;
case 32:return 61;
break;
case 33:return 63;
break;
case 34:return 62;
break;
case 35:return 66;
break;
case 36:return 67;
break;
case 37:return 70;
break;
case 38:return 71;
break;
case 39:return 68;
break;
case 40:return 69;
break;
case 41:return 64
break;
case 42:return 65;
break;
case 43:return 58;
break;
case 44:return 28;
break;
case 45:return 30;
break;
case 46:return 39;
break;
case 47:return 40;
break;
case 48:return 21;
break;
case 49:return 42;
break;
case 50:return 48;
break;
case 51:return 86;
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 76; 
break;
case 54:return 72;
break;
case 55:return 24;
break;
case 56:return 4;
break;
case 57: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?::)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'([^\\\"]|\\.)')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}