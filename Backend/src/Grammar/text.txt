/**
 * Ejemplo Intérprete Sencillo con Jison utilizando Nodejs en Ubuntu
 */

/* Definición Léxica */
%lex

%options case-sensitive

%%

\s+											// Espacios en blanco
"//".*										// Comentario de linea
[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]			// Comentario multilina

//Tipos de datos
"int"			return 'RINT';
"double"			return 'RDOUBLE';
"boolean"			return 'RBOOLEAN';
"char"			return 'RCHAR';
"String"			return 'RSTRING';

//Palabras reservadas 
"class"			return 'RCLASS';
"import"			return 'RIMPORT';
"main"			return 'RMAIN';
"void"			return 'RVOID';
"if"				return 'RIF';
"else"				return 'RELSE';
"switch"			return 'RSWITCH';
"case"				return 'RCASE';
"default"			return 'RDEFAULT';
"break"				return 'RBREAK';
"while"				return 'RWHILE';
"do"				return 'RDO';
"for"				return 'RFOR';
"continue"				return 'RCONTINUE';
"return"				return 'RRETURN';
"System.out.println"	return "RPRINT";
"System.out.print"		return "RPRINT";
"true"							return "RTRUE";
"false"							return "RFALSE;"

//Operaciones aritmeticas
"++"				return 'INCREMENTO';
"+"					return 'SUMA';
"--"				return 'DECREMENTO';
"-"					return 'RESTA';
"*"					return 'MULTIPLICACION';
"/"					return 'DIVISION';
"^"					return 'POTENCIA';
"%"					return 'MODULO';


//Operciones relaciones
"=="				return 'IGUALDAD';
"!="				return 'DISTINTO';
">"					return 'MAYORQUE';
">="				return 'MAYORIGUALQUE';
"<"					return 'MENORQUE';
"<="				return 'MENORIGUALQUE';

//Operaciones logicas
"&&"				return 'AND'
"||"				return 'OR';
"!"					return 'NOT';

//Simbolos del lenguaje
"{"					return 'LLAVEIZQUIERDA';
"}"					return 'LLAVEDERECHA';
"("					return 'PARENTESISIZQUIERDO';
")"					return 'PARENTESISDERECHO';
":"					return 'DOSPUNTOS';
";"					return 'PUNTOYCOMA';
"."					return 'PUNTO';
","					return 'COMA';
"="					return 'IGUAL';



\"[^\"]*\"				{ yytext = yytext.substr(1,yyleng-2); return 'CADENA'; }
\'[^\"]?\'				{ yytext = yytext.substr(1,yyleng-2); return 'CARACTER'; }
[0-9]+("."[0-9]+)?\b  	return 'DECIMAL';
[0-9]+\b				return 'NUMERO';
([a-zA-Z_])[a-zA-Z0-9_]*	return 'IDENTIFICADOR';


<<EOF>>				return 'EOF';
.					{ console.error('Este es un error léxico: ' + yytext + ', en la linea: ' + yylloc.first_line + ', en la columna: ' + yylloc.first_column); }

/lex

/* Asociación de operadores y precedencia */

%left 'SUMA' 'RESTA'
%left 'MULTIPLICACION' 'DIVISION'
%left 'POTENCIA' 'MODULO'
%left UMENOS

%start INICIO

%% /* Definición de la gramática */

INICIO
	: INSTRUCCIONES EOF {}
;

INSTRUCCIONES
	: INSTRUCCIONES INSTRUCCION 	
	| INSTRUCCION					
;

INSTRUCCION
	: DECLARACION
	| ASIGNACION                                                   
	| error { console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); }
;

DECLARACION : TIPO IDENTIFICADOR IGUAL EXPRESION PUNTOYCOMA 
;

ASIGNACION : IDENTIFICADOR IGUAL EXPRESION PUNTOYCOMA
;

TIPO 
	: RINT
  | RDOUBLE
  | RBOOLEAN
	| RSTRING
	| RCHAR
;

EXPRESION : RESTA EXPRESION %prec UMENOS	   
          | NOT EXPRESION	               
          | EXPRESION SUMA EXPRESION		  
          | EXPRESION RESTA EXPRESION		    
          | EXPRESION MULTIPLICACION EXPRESION		    
          | EXPRESION DIVISION EXPRESION	        
					| EXPRESION POTENCIA EXPRESION	 
					| EXPRESION MODULO EXPRESION	 
          | EXPRESION MENORQUE EXPRESION		    
          | EXPRESION MAYORQUE EXPRESION		    
          | EXPRESION MAYORIGUALQUE EXPRESION	    
          | EXPRESION MENORIGUALQUE EXPRESION	    
          | EXPRESION IGUALDAD EXPRESION	   
          | EXPRESION DISTINTO EXPRESION	    
          | EXPRESION OR EXPRESION	    
          | EXPRESION AND EXPRESION	    
          | DECIMAL
					| NUMERO	 				    
          | RTRUE				    
          | RFALSE				    
          | CADENA			    
					| CARACTER			    
          | IDENTIFICADOR			          
          | '(' EXPRESION ')'		          
          ;